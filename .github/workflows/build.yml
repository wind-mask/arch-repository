name: Build Packages

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  # ===============================================================
  # Job 1: 查找包含更新的 PKGBUILD 的目录
  # ===============================================================
  find_packages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便比较变更

      - name: Generate matrix of changed package directories
        id: set_matrix
        run: |
          # 对于 pull_request 事件，比较目标分支和当前分支
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BASE_SHA=${{ github.event.pull_request.base.sha }}
            HEAD_SHA=${{ github.event.pull_request.head.sha }}
          else
            # 对于 push 事件，获取前一个提交
            BASE_SHA=$(git rev-parse ${{ github.sha }}^)
            HEAD_SHA=${{ github.sha }}
          fi
          
          echo "Comparing changes between ${BASE_SHA} and ${HEAD_SHA}"
          
          # 获取更改的文件列表
          CHANGED_FILES=$(git diff --name-only ${BASE_SHA} ${HEAD_SHA})
          
          # 查找所有包含 PKGBUILD 的目录
          ALL_PKG_DIRS=$(find . -name PKGBUILD -exec dirname {} \;)
          
          # 筛选出有变更的包目录
          CHANGED_PKG_DIRS=()
          for pkg_dir in ${ALL_PKG_DIRS}; do
            # 检查该包目录下是否有任何文件被修改
            if echo "$CHANGED_FILES" | grep -q "^${pkg_dir#./}"; then
              CHANGED_PKG_DIRS+=("$pkg_dir")
            fi
          done
          
          # 如果没有变更的包，则添加一个空占位符以避免矩阵为空
          if [ ${#CHANGED_PKG_DIRS[@]} -eq 0 ]; then
            echo "No package directories changed"
            echo "matrix=[]" >> $GITHUB_OUTPUT
          else
            # 将变更的包目录转换为 JSON 数组
            MATRIX_JSON=$(printf '%s\n' "${CHANGED_PKG_DIRS[@]}" | jq -R . | jq -s .)
            echo "Changed package directories: ${MATRIX_JSON}"
            echo matrix=${MATRIX_JSON} >> $GITHUB_OUTPUT
          fi

  # ===============================================================
  # Job 2: 根据找到的目录列表，为每个更新的包进行构建
  # ===============================================================
  build_package:
    needs: find_packages
    runs-on: ubuntu-latest
    # 只有当矩阵不为空时才运行
    if: ${{ fromJson(needs.find_packages.outputs.matrix)[0] != null }}
    strategy:
      fail-fast: false
      matrix:
        package_dir: ${{ fromJson(needs.find_packages.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build package in ${{ matrix.package_dir }}
        uses: heyhusen/archlinux-package-action@v2
        with:
          path: ${{ matrix.package_dir }}
          updpkgsums: true
          aur: true